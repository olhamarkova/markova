{
	"info": {
		"_postman_id": "f437480a-1420-43f9-863c-13b4229dae97",
		"name": "SimpleCoursesAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "24716912"
	},
	"item": [
		{
			"name": "Happy path",
			"item": [
				{
					"name": "Get all courses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');",
									"const ajv = new Ajv();",
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code should be 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Count of courses should be eql 10 by default\", () => {",
									"    pm.expect(response.courses.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Schema for the response should be valid\", () => {",
									"  const schema = {",
									"    type: \"object\",",
									"    properties: {",
									"      reqId: {",
									"        type: \"string\"",
									"      },",
									"      courses: {",
									"        type: \"array\",",
									"        items: {",
									"          type: \"object\",",
									"          properties: {",
									"            id: { type: \"string\" },",
									"            title: { type: \"string\" },",
									"            author: { type: \"string\" },",
									"            free: { type: \"boolean\" },",
									"            resource: { type: \"string\" },",
									"            category: { type: \"string\" }",
									"          }",
									"        }",
									"      },",
									"      count: { type: \"number\" }",
									"    },",
									"    required: [\"courses\", \"count\"]",
									"  };",
									"",
									"  const validate = ajv.compile(schema);",
									"  pm.expect(validate(response)).to.be.true;",
									"});",
									"",
									"pm.test(\"Response time is within acceptable range\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(300);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/courses",
						"description": "### Retrieve Courses\n\nThis endpoint makes an HTTP GET request to retrieve a list of courses.\n\n#### Request\n\nNo request body is required for this endpoint.\n\n#### Response\n\nThe response will be a JSON object representing the list of courses. The schema for the response can be documented as follows:\n\n``` json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"courses\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"courseId\": {\n            \"type\": \"string\"\n          },\n          \"courseName\": {\n            \"type\": \"string\"\n          },\n          \"courseDescription\": {\n            \"type\": \"string\"\n          },\n          \"courseInstructor\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "Create a course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');",
									"const ajv = new Ajv();",
									"const response = pm.response.json();",
									"pm.environment.set(\"newCourseId\", response.data.course.id)",
									"",
									"pm.test(\"Status code is 201\", () => {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Success message should be correct\", () => {",
									"     pm.expect(response.message).to.eq(\"The course was created successfully\");",
									"});",
									"",
									"pm.test(\"Schema for the response should be valid\", () => {",
									"    const schema = {",
									"        type: \"object\",",
									"        properties: {",
									"            reqId: { type: \"string\" },",
									"            message: { type: \"string\" },",
									"            data: { type: \"object\", ",
									"            properties: {",
									"                course: {",
									"                    type: \"object\",",
									"                    properties: {",
									"                        id: { type: \"string\" },",
									"                        title: { type: \"string\" },",
									"                        author: { type: \"string\" },",
									"                        free: { type: \"boolean\" },",
									"                        resource: { type: \"string\" },",
									"                        category: { type: \"string\" }",
									"                    },",
									"                    required: [\"id\", \"title\", \"author\", \"free\", \"resource\", \"category\"]",
									"                }",
									"            }",
									"        },",
									"        ",
									"    },",
									"    required: [\"reqId\", \"data\"]",
									"}",
									"",
									"    pm.expect(ajv.validate(schema, response)).to.be.true;",
									"});",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"baseURL\") + \"/courses\" + \"/\" + pm.environment.get(\"newCourseId\"),",
									"    method: \"DELETE\",",
									"    header: {",
									"        \"Content-Type\": \"application/json\",",
									"    },",
									"    body: {}",
									"}, function (err, res) {",
									"    if(err){",
									"        throw new Error(\"Something went wrong during pre-request script\")",
									"    }",
									"    const response = res.json();",
									"    pm.expect(response.message).to.eq(\"The course was deleted successfully\");",
									"});",
									"",
									"pm.environment.unset(\"newCourseId\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"author\": \"{{$randomFullName}}\",\n    \"isFree\": true,\n    \"site\": \"https://example.com/\",\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"type\": \"QA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/courses"
					},
					"response": []
				},
				{
					"name": "Get a course by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const Ajv = require('ajv');",
									"const ajv = new Ajv();",
									"const response = pm.response.json();",
									"const courseId = pm.environment.get(\"courseId\");",
									"",
									"if(pm.response.code === 200){",
									"    pm.test(\"The course should have the correct ID\", () => {",
									"        pm.expect(response.course.id).to.eq(courseId);",
									"    });",
									"",
									"    pm.test(\"Schema for the response should be valid\", () => {",
									"        const schema = {",
									"        type: \"object\",",
									"        properties: {",
									"            reqId: { type: \"string\" },",
									"            course: {",
									"                type: \"object\",",
									"                properties: {",
									"                    id: { type: \"string\" },",
									"                    title: { type: \"string\" },",
									"                    author: { type: \"string\" },",
									"                    free: { type: \"boolean\" },",
									"                    resource: { type: \"string\" },",
									"                    category: { type: \"string\" }",
									"                },",
									"            required: [\"id\", \"title\", \"author\", \"free\", \"resource\", \"category\"]",
									"        }",
									"     },",
									"        required: [\"reqId\", \"course\"]",
									"    };",
									"",
									"    pm.expect(ajv.validate(schema, response)).to.be.true;",
									"    });",
									"",
									"}",
									"",
									"if(!courseId){",
									"    pm.test(\"Status code should be 404\", () => {",
									"    pm.response.to.have.status(404);",
									"    });",
									"}",
									"",
									"pm.environment.unset(\"courseId\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get(\"baseURL\") + \"/courses\",",
									"    method: \"GET\",",
									"    header: {",
									"        \"Content-Type\": \"application/json\",",
									"    },",
									"    body: {}",
									"}, function (err, res) {",
									"    if(err){",
									"        throw new Error(\"Something went wrong during pre-request script\")",
									"    }",
									"    const response = res.json();",
									"    const courseId = response.courses[0].id;",
									"    pm.environment.set(\"courseId\", courseId)",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/courses/{{courseId}}"
					},
					"response": []
				},
				{
					"name": "Update a course by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response should contain updated course data\", () => {",
									"    pm.expect(response.data).to.has.property(\"updatedCourse\");",
									"});",
									"",
									"pm.test(\"Success message should be correct\", () => {",
									"    pm.expect(response.message).to.eq(\"The course was updated successfully\");",
									"});",
									"",
									"pm.test(\"Category should be updated\", () => {",
									"    pm.expect(response.data.updatedCourse.category).to.eq(\"QA\");",
									"});",
									"",
									"pm.sendRequest({",
									"    url: pm.environment.get(\"baseURL\") + \"/courses\" + \"/\" + pm.environment.get(\"newCourseId\"),",
									"    method: \"DELETE\",",
									"    header: {",
									"        \"Content-Type\": \"application/json\",",
									"    },",
									"    body: {}",
									"}, function (err, res) {",
									"    if(err){",
									"        throw new Error(\"Something went wrong during pre-request script\")",
									"    }",
									"    const response = res.json();",
									"    pm.expect(response.message).to.eq(\"The course was deleted successfully\");",
									"});",
									"",
									"pm.environment.unset(\"newCourseId\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get(\"baseURL\") + \"/courses\",",
									"    method: \"POST\",",
									"    header: {",
									"        \"Content-Type\": \"application/json\",",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            author: \"Some awesome author\",",
									"            isFree: true,",
									"            site: \"https://example.com/\",",
									"            title: \"Some awesome course\",",
									"            type: \"ENG\"",
									"        })",
									"    }",
									"}, function (err, res) {",
									"    if(err){",
									"        throw new Error(err)",
									"    }",
									"    const response = res.json();",
									"    pm.environment.set(\"newCourseId\", response.data.course.id)",
									"    pm.expect(response.message).to.eq(\"The course was created successfully\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"author\": \"{{$randomFullName}}\",\n    \"isFree\": true,\n    \"site\": \"https://example.com/\",\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"type\": \"QA\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/courses/{{newCourseId}}"
					},
					"response": []
				},
				{
					"name": "Delete a course",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", () => {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Success message should be correct\", () => {",
									"    pm.expect(response.message).to.eq(\"The course was deleted successfully\");",
									"});",
									"",
									"pm.environment.unset(\"courseId\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.sendRequest({",
									"    url: pm.environment.get(\"baseURL\") + \"/courses\",",
									"    method: \"POST\",",
									"    header: {",
									"        \"Content-Type\": \"application/json\",",
									"    },",
									"    body: {",
									"        mode: 'raw',",
									"        raw: JSON.stringify({",
									"            author: \"Some awesome author\",",
									"            isFree: true,",
									"            site: \"https://example.com/\",",
									"            title: \"Some awesome course\",",
									"            type: \"ENG\"",
									"        })",
									"    }",
									"}, function (err, res) {",
									"    if(err){",
									"        throw new Error(err)",
									"    }",
									"    const response = res.json();",
									"    pm.environment.set(\"courseId\", response.data.course.id)",
									"    pm.expect(response.message).to.eq(\"The course was created successfully\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/courses/{{courseId}}"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const response = pm.response.json();",
							"pm.test(\"Response body should contain request ID\", () => {",
							"    pm.expect(response).to.has.property(\"reqId\");",
							"});",
							""
						]
					}
				}
			]
		},
		{
			"name": "Get All Courses",
			"item": [
				{
					"name": "Positive checks",
					"item": [
						{
							"name": "Skip parameter eqls 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response should contain 10 courses as by default\", () => {",
											"    pm.expect(response.courses.length).to.eql(10);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/courses?skip=0",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"courses"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Skip parameter eqls 5",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Response should contain 10 courses by default\", () => {",
											"    pm.expect(response.courses.length).to.eql(10);",
											"});",
											"",
											"pm.test(\"Title for the first course of the list should be correct\", () => {",
											"    pm.expect(response.courses[0].title).to.eql(pm.environment.get(\"courseTitle\"));",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"baseURL\") + \"/courses\",",
											"    method: \"GET\",",
											"    header: {",
											"        \"Content-Type\": \"application/json\",",
											"    },",
											"    body: {}",
											"}, function (err, res) {",
											"    if(err){",
											"        throw new Error(\"Something went wrong during pre-request script\")",
											"    }",
											"    const response = res.json();",
											"    const fifthCourseTitile = response.courses[5].title;",
											"    pm.environment.set(\"courseTitle\", fifthCourseTitile)",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/courses?skip=5",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"courses"
									],
									"query": [
										{
											"key": "skip",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Limit parameter eqls 0",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Number of courses should be eql courses count\", () => {",
											"    pm.expect(response.courses.length).to.eql(response.count);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/courses?limit=0",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"courses"
									],
									"query": [
										{
											"key": "limit",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Limit parameter eqls 11",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Quantity of courses should be eql 11\", () => {",
											"    pm.expect(response.courses.length).to.eql(11);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/courses?limit=11",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"courses"
									],
									"query": [
										{
											"key": "limit",
											"value": "11"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Predefined filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const myFilter = pm.environment.get(\"myFilter\");",
											"",
											"if(myFilter && myFilter.length > 0) {",
											"    pm.execution.setNextRequest(\"Get all courses with filter\");",
											"} else {",
											"    pm.execution.setNextRequest(null);",
											"}",
											"",
											"const response = pm.response.json();",
											"const type = pm.environment.get(\"type\");",
											"const isFree = pm.environment.get(\"isFree\");",
											"const author = pm.environment.get(\"author\");",
											"",
											"let category;",
											"let price;",
											"let courseAuthor;",
											"response.courses.forEach(el => {",
											"    price = el.free;",
											"    category = el.category;",
											"    courseAuthor = el.author;",
											"    return { category, price, courseAuthor }",
											"    });",
											"",
											"pm.test(\"Type of a course should be correct\", () => {",
											"    if(type) {",
											"    pm.expect(type).to.eql(category);",
											"    } else {",
											"        pm.expect(type).to.eql(null);",
											"    }",
											"});",
											"",
											"pm.test(\"Author of a course should be correct\", () => {",
											"    if(author) {",
											"        pm.expect(author).to.equal(courseAuthor);",
											"    } else {",
											"        pm.expect(author).to.equal(null);",
											"    }",
											"});",
											"",
											"pm.test(\"Price of a course should be correct\", () => {",
											"    if(price) {",
											"        pm.expect(price.toString()).to.eql(isFree.toString());",
											"        ",
											"    } else {",
											"        pm.expect(price.toString()).to.eql(null || false.toString());",
											"    }",
											"});",
											"",
											"pm.environment.unset(\"type\");",
											"pm.environment.unset(\"isFree\");",
											"pm.environment.unset(\"author\");",
											"",
											"if(myFilter.length === 0) {",
											"    pm.environment.unset(\"myFilter\");",
											"    pm.environment.unset(\"filter\");",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let myFilter = pm.environment.get(\"myFilter\");",
											"",
											"if(!myFilter) {",
											"    myFilter = [",
											"        \"type:QA,free:false,author:Valentin Despa\",",
											"        \"type:AQA,free:false,author:Valentin Despa\",",
											"        \"type:ENG,free:true,author:Duolingo\",",
											"        \"type:QA,free:true,author:Попелюха\",",
											"        \"free:false,author:Valentin Despa\",",
											"        \"type:QA,author:Valentin Despa\",",
											"        \"type:QA,free:true\",",
											"    ]",
											"}",
											"",
											"let envFilter = myFilter.shift();",
											"pm.environment.set(\"filter\", envFilter);",
											"pm.environment.set(\"myFilter\", myFilter);",
											"",
											"const filter = pm.environment.get(\"filter\");",
											"",
											"if(filter) {",
											"const properties = filter.split(',');",
											"const parameters = {};",
											"properties.forEach(function(property) {",
											"    const tup = property.split(':');",
											"    parameters[tup[0]] = tup[1];",
											"    });",
											"    if(parameters) {",
											"    pm.environment.set(\"type\", parameters.type);",
											"    pm.environment.set(\"isFree\", parameters.free);",
											"    pm.environment.set(\"author\", parameters.author);",
											"    };",
											"} else {",
											"    pm.environment.unset(\"filter\");",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/courses?filter={{filter}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"courses"
									],
									"query": [
										{
											"key": "limit",
											"value": "",
											"disabled": true
										},
										{
											"key": "skip",
											"value": "24",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "{{filter}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Data file filter",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const type = pm.environment.get(\"type\");",
											"const isFree = pm.environment.get(\"isFree\");",
											"const author = pm.environment.get(\"author\");",
											"",
											"let category;",
											"let price;",
											"let courseAuthor;",
											"response.courses.forEach(el => {",
											"    price = el.free;",
											"    category = el.category;",
											"    courseAuthor = el.author;",
											"    return { category, price, courseAuthor }",
											"    });",
											"",
											"pm.test(\"Type of a course should be correct\", () => {",
											"    if(type) {",
											"    pm.expect(type).to.eql(category);",
											"    } else {",
											"        pm.expect(type).to.eql(null);",
											"    }",
											"});",
											"",
											"pm.test(\"Author of a course should be correct\", () => {",
											"    if(author) {",
											"        pm.expect(author).to.equal(courseAuthor);",
											"    } else {",
											"        pm.expect(author).to.equal(null);",
											"    }",
											"});",
											"",
											"pm.test(\"Price of a couse should be correct\", () => {",
											"    if(price) {",
											"        pm.expect(price.toString()).to.eql(isFree.toString());",
											"        ",
											"    } else {",
											"        pm.expect(price.toString()).to.eql(null || false.toString());",
											"    }",
											"});",
											"",
											"pm.environment.unset(\"type\");",
											"pm.environment.unset(\"isFree\");",
											"pm.environment.unset(\"author\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const filter = pm.iterationData.get(\"filter\");",
											"",
											"const properties = filter.split(',');",
											"const parameters = {};",
											"properties.forEach(function(property) {",
											"    const tup = property.split(':');",
											"    parameters[tup[0]] = tup[1];",
											"    });",
											"    if(parameters) {",
											"    pm.environment.set(\"type\", parameters.type);",
											"    pm.environment.set(\"isFree\", parameters.free);",
											"    pm.environment.set(\"author\", parameters.author);",
											"    };",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/courses?filter={{filter}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"courses"
									],
									"query": [
										{
											"key": "limit",
											"value": "",
											"disabled": true
										},
										{
											"key": "skip",
											"value": "24",
											"disabled": true
										},
										{
											"key": "filter",
											"value": "{{filter}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const response = pm.response.json(); ",
									"",
									"pm.test(\"Check count\", () => {",
									"    pm.expect(response).to.has.property(\"count\");",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Negative checks",
					"item": [
						{
							"name": "Skip more than exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Courses property should be an empty array\", () => {",
											"    pm.expect(response.courses).to.be.an(\"array\").that.to.be.empty;",
											"});",
											"",
											"pm.environment.unset(\"coursesCount\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"baseURL\") + \"/courses\",",
											"    method: \"GET\",",
											"    header: {",
											"        \"Content-Type\": \"application/json\",",
											"    },",
											"    body: {}",
											"}, function (err, res) {",
											"    if(err){",
											"        throw new Error(\"Something went wrong during pre-request script\")",
											"    }",
											"    const response = res.json();",
											"    const coursesCount = response.count;",
											"    pm.environment.set(\"coursesCount\", Number(coursesCount) + 1)",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/courses?skip={{coursesCount}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"courses"
									],
									"query": [
										{
											"key": "skip",
											"value": "{{coursesCount}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Skip parameter eqls -1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Title for the first course of the list should be correct\", () => {",
											"    pm.expect(response.courses[0].title).to.eql(pm.environment.get(\"courseTitle\"));",
											"});",
											"",
											"pm.environment.unset(\"courseTitle\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"baseURL\") + \"/courses\",",
											"    method: \"GET\",",
											"    header: {",
											"        \"Content-Type\": \"application/json\",",
											"    },",
											"    body: {}",
											"}, function (err, res) {",
											"    if(err){",
											"        throw new Error(\"Something went wrong during pre-request script\")",
											"    }",
											"    const response = res.json();",
											"    const secondCourseTitile = response.courses[1].title;",
											"    pm.environment.set(\"courseTitle\", secondCourseTitile)",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/courses?skip=-1",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"courses"
									],
									"query": [
										{
											"key": "skip",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Skip parameter eqls 1.1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Title for the first course of the list should be correct\", () => {",
											"    pm.expect(response.courses[0].title).to.eql(pm.environment.get(\"courseTitle\"));",
											"});",
											"",
											"pm.test(\"Count of courses should be 10 as by default\", () => {",
											"    pm.expect(response.courses.length).to.eql(10);",
											"});",
											"",
											"pm.environment.unset(\"courseTitle\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"baseURL\") + \"/courses\",",
											"    method: \"GET\",",
											"    header: {",
											"        \"Content-Type\": \"application/json\",",
											"    },",
											"    body: {}",
											"}, function (err, res) {",
											"    if(err){",
											"        throw new Error(\"Something went wrong during pre-request script\")",
											"    }",
											"    const response = res.json();",
											"    const secondCourseTitile = response.courses[1].title;",
											"    pm.environment.set(\"courseTitle\", secondCourseTitile)",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/courses?skip=1.1",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"courses"
									],
									"query": [
										{
											"key": "skip",
											"value": "1.1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Limit more than exist",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Check limit of courses\", () => {",
											"    pm.expect(response.courses.length).to.eql(response.count);",
											"});",
											"",
											"pm.environment.unset(\"coursesCount\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.sendRequest({",
											"    url: pm.environment.get(\"baseURL\") + \"/courses\",",
											"    method: \"GET\",",
											"    header: {",
											"        \"Content-Type\": \"application/json\",",
											"    },",
											"    body: {}",
											"}, function (err, res) {",
											"    if(err){",
											"        throw new Error(\"Something went wrong during pre-request script\")",
											"    }",
											"    const response = res.json();",
											"    const coursesCount = response.count;",
											"    pm.environment.set(\"coursesCount\", Number(coursesCount) + 1)",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/courses?limit={{coursesCount}}",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"courses"
									],
									"query": [
										{
											"key": "limit",
											"value": "{{coursesCount}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Limit parameter eqls -1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"",
											"pm.test(\"Number of courses should be eql to limit\", () => {",
											"    pm.expect(response.courses.length).to.eql(pm.environment.get(\"limit\"));",
											"});",
											"",
											"pm.environment.unset(\"limit\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const params = pm.request.url.query.all();",
											"",
											"let limit;",
											"params.forEach(el => {",
											"    if(el.key === \"limit\") {",
											"        limit = Math.abs(el.value);",
											"    }",
											"});",
											"",
											"pm.environment.set(\"limit\", limit);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/courses?limit=-1",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"courses"
									],
									"query": [
										{
											"key": "limit",
											"value": "-1"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Limit parameter eqls 1.1",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const response = pm.response.json();",
											"const limit = pm.environment.get(\"limit\")",
											"",
											"pm.test(\"Number of courses should be eql to limit\", () => {",
											"    pm.expect(response.courses.length).to.eql(parseInt(limit));",
											"});",
											"",
											"pm.environment.unset(\"limit\");",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const params = pm.request.url.query.all();",
											"",
											"let limit;",
											"params.forEach(el => {",
											"    if(el.key === \"limit\") {",
											"        limit = Math.floor(el.value);",
											"    }",
											"});",
											"",
											"pm.environment.set(\"limit\", limit);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseURL}}/courses?limit=1.1",
									"host": [
										"{{baseURL}}"
									],
									"path": [
										"courses"
									],
									"query": [
										{
											"key": "limit",
											"value": "1.1"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"pm.test(\"Status code is 200\", () => {",
							"    pm.response.to.have.status(200);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Wrong IDs",
			"item": [
				{
					"name": "Update course by wrong id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"author\": \"I am a mom's Developer\",\n    \"isFree\": true,\n    \"site\": \"https://example.com\",\n    \"title\": \"Yes, I'm cool dev!\",\n    \"type\": \"QA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/courses/22333444444"
					},
					"response": []
				},
				{
					"name": "Delete course by wrong id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/courses/22333444444"
					},
					"response": []
				},
				{
					"name": "Get course by wrong id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/courses/22333444444"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const response = pm.response.json();",
							"",
							"pm.test(\"Status code is 404\", () => {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Response should contain a fact\", () => {",
							"    pm.expect(response).to.has.property(\"fact\").that.is.a(\"string\");",
							"});",
							"",
							"pm.test(\"Response should contain a message\", () => {",
							"    pm.expect(response.message).to.be.eq(\"Something went wrong. Please check your request and try again\")",
							"});",
							""
						]
					}
				}
			]
		},
		{
			"name": "Invalid request body",
			"item": [
				{
					"name": "Create course invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"author\": \"{{author}}\",\n    \"isFree\": {{isFree}},\n    \"site\": \"{{site}}\",\n    \"title\": \"{{title}}\",\n    \"type\": \"{{type}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/courses"
					},
					"response": []
				},
				{
					"name": "Update course invalid data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"author\": \"{{author}}\",\n    \"isFree\": {{isFree}},\n    \"site\": \"{{site}}\",\n    \"title\": \"{{title}}\",\n    \"type\": \"{{type}}\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/courses/640f2f1b44c471a3cdcb8079"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const response = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", () => {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response should contain a fact\", () => {",
							"    pm.expect(response).to.has.property(\"fact\");",
							"});",
							""
						]
					}
				}
			]
		},
		{
			"name": "Wrong method",
			"item": [
				{
					"name": "Update course by wrong method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"author\": \"{{$randomFullName}}\",\n    \"isFree\": true,\n    \"site\": \"https://testautomationu.applitools.com/unit-testing/\",\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"type\": \"QA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/courses/640f2f1b44c471a3cdcb8079"
					},
					"response": []
				},
				{
					"name": "Create course wrong method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"author\": \"{{$randomFullName}}\",\n    \"isFree\": true,\n    \"site\": \"https://testautomationu.applitools.com/unit-testing/\",\n    \"title\": \"{{$randomLoremSentence}}\",\n    \"type\": \"QA\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseURL}}/courses"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const response = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", () => {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Response should contain error\", () => {",
							"    pm.expect(response).to.has.property(\"error\");",
							"});"
						]
					}
				}
			]
		}
	]
}